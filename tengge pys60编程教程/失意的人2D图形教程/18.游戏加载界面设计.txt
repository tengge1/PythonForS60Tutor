本教程来自iniwap！转载请注明出处！
作者：┈┾夨憶D*.亼ぺ
#继续第十八课，这节讲游戏的前奏之一：进程条
#索然之前进行过比赛，但是对于一个完整的游戏，我觉得这节还是有必要讲讲的
#进程条，顾名思义进程的提示条。主要是为了消除
#游戏资源加载前玩家等待的不耐烦心情而已
#并不一定像进程显示的进度那样，当然其主要目的还是实现了资源的初始化
#留心的童靴会发现游戏开始的时候进程条到最后停留的时间会很长
#这就是进度条资源的真正加载很可能是在最后才进行的。
#-*-coding:utf-8-*-
#导入模块
#顺便说下，这里使用了另一种导入方法import 模块1,模块2,..的方式，作用是一样的。
import appuifw,graphics,e32
#??面仍采用标准模版
running=1
def chn(x):
++return x.decode(’utf8’)
def quit():
++global running
++running=0
canvas=appuifw.Canvas()
appuifw.app.body=canvas
appuifw.app.screen=’full’
appuifw.app.exit_key_handler=quit
img=graphics.Image.new(canvas.size)
#进度条常见形式为100%
#所以这里循环100次
for i in range(100):
#清屏(黑色)
++img.clear(0)
#进度条边框
++img.rectangle((40,80,140,100),0x77777777)
#下面这个循环产生所谓的立体感，效果看截图
#原理方法在前面的教程有讲了，颜色渐变
#这里利用的是矩形的，原理是一样的
++for j in range(10):
++++img.rectangle((40,80+j,40+i,100-j),fill=(50+j*2,50+j*2,255-j*10))
#显示进度百分比，这里str()内建函数，转化数字为字符串
++++img.text((80,95),chn(str(i+1)+’%’),0xff0000)
++++canvas.blit(img)
#延时0.05秒，不然就看不到进度了。一下就跑到头了。
++e32.ao_sleep(0.05)
#下面这段实现进度条来回游动的效果
#和上面的有所不同，这是两种不同的进度效果而已
#定义进度条运动变量，记录的是进度条坐标增加或者减少了多少
move=0
#进度条向左或者向右运动标志(x坐标)，主要是控制move是加还是减，不然进度条就跑到外面去了
flag=1
#既然是来回运动，这种效果肯定要保持住了，这样的话要while死循环。
#这和上面的不同，上面的进度满后，就要转入游戏界面，所以不能死循环。当然这个也是不能的
#不然就到不了游戏界面了，实际中也要控制时间的。
while running:
#首先向右，这时flag是正的，move是增加的，于是向右运动
++move+=flag
#外框
++img.clear(0)
#清屏
++img.rectangle((40,80,140,100),0x77777777)
#如果运动到了边界，flag取负，这样下次move就是减少了
++if move>60:
++++flag=-flag
#如果运动到最左边，flag再取负，这时move是增加了。
++if move<0:
++++flag=-flag
#立体效果
++for j in range(10):
++++img.rectangle((40+move,80+j,80+move,100-j),fill=(50+j*2,50+j*2,255-j*10))
++canvas.blit(img)
#延时0.05秒，不然又是跑的太快了
++e32.ao_sleep(0.05)
#好了，这节先这样的。有问题发帖。
