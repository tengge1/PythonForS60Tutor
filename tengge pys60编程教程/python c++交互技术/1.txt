【教程】PYthonC++交互技术①
最近在学习PYthonC++交互技术，在PYthon中插入C#语言，提高PYthon软件的整体运行速度，交互语编写的PY软件比纯PY软件速度更快功能更强大，但是并不是随便就能插入C代码的，那么，到底该怎么做呢？这里给大家一个高手写的教程。
①Python语言简介
*Python是一种脚本语言。以开放的开发接口和独特的语法著称。尽管Python在国内引起注意只有几年的时间，但实际上Python出现于上世纪90年代（据www.python.org介绍，这个时间可以上溯至1990年），已经有十几年的时间，它的流行也有很久，在嵌入脚本、互联网应用、系统管理和维护等领域，Python使用的非常广泛。
*Python的语法与我们常见的C系语法有很大不同，��于Python，书写格式也是语法的部分。主要表现在，每一个子语句段都要比它的父级缩进一层。例如：
?*>>> a, b = 0, 1
>>> while b < 1000:
?*...     print b, ...
a, b = b, a+b
...  以上是一段求Fibonacci数列的程序，>>>和…都是Python控制台的交互提示符。我们可以看到，while循环的循环体不是通过括号或者end之类的关键字标示，而是用缩进与上一级区分开。在Python中，每级代码之间的缩进距离不做要求，但是在同一个文件中必须保持一致，最常见的写法是缩进四个空格。
理解这一点后，Python代码的可读性非常高。在强制性的书写规范下，更容易写出规范的代码。
Python支持通用的各种语法结构，包括if、while/for循环、函数、类、异常处理以及模块（module）和包（Package）。以下是一些常见的语法示例：
（展示Python代码）
时间所限，我们不可能在这里详细了解Python语言，对于交互式开发人员，有几点值得注意，在这里简单介绍下：
Python采用命名—对象实体机制。任何Python中的元素都可以看作是一种对象。包括所有的数据类型和定义。对变量的定义和赋值，实际上是将一个命名绑定到托管环境中的一个对象上。这个过程不涉及对象本身的运算，也不进行类型检查，所以在程序运行过程中可以任意对某个命名赋值并改变其类型。
Python对象在运行期可以动态的添加和删除成员，不受类型限制（当然，也可以设计出静态类型的数据结构）。
Python支持运算符重载。
