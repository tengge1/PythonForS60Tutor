标题:【教程】PYthonC++交互技术③
扩展Python系统
*扩展Python，即编写可供Python加载的模块，由Python程序进行调用。简单来讲，主要有以下几个步骤：
*编写符合Python封装约定的函数和结构定义。对于函数而言，要求参数均为PyObject*   或其“子”类型。当然，C语言中没有这样的语法，这个继承关系是Python语法意义的。而对于自定义的对象，Python有一套完备的约定，我们在Python的文档中可以看到若干示例。（展示代码）。
*对于需要开放的函数，要编写方法定义表，这是一个UNION，按照固定格式填写数据。（展示代码）。对于类型对象，则是通过PyModule_AddObject方法引入。
*要引入函数定义的话，还需要执行模块初始化函数。
*将项目编��为动态链接库，放在Python的DLLs路径即可。
嵌入Python解释器
*在C程序中嵌入Python解释器并不复杂，基本的流程如下：
*调用Py_Initialize()函数，初始化虚拟机。
*编写操作虚拟机的命令。
*调用Py_Finalize()函数释放虚拟机资源。
*Python虚拟机提供了丰富的API以供操作，基本上用Python脚本可以实现的功能，通过API都可以实现。当然通常不会完全使用API，而是以API和内嵌脚本结合使用，在Python文档中提供了一个简单的例子，演示了常用的模块和对象引入、执行可回调对象，变量提取等功能（展示代码）。
综合技术——扩展式嵌入
*我们可以将Python虚拟机嵌入C/C++程序的同时，通过扩展代码，将我们需要的内容引入Python虚拟机，这样，就可以在虚拟机中通过Python脚本访问C++环境中提供的扩展内容，在掌握了扩展和嵌入技术后，这个应用十分自然和简便，在Python文档中，有一个实例说明了这中应用方式。（展示代码）
Boost.Python
*Python虚拟机本身以标准C编写，它的API也均为C型式，直接应用在C++程序中略有不便。通常我们会使用一些第三方的程序库来实现，这里重点介绍BOOST.Python的使用。
*Boost是一个久负盛名的C++代码库，关于它的具体情况在网上有很多介绍，具体到BOOST.Python，这是BOOST开发组专门为C++/Python直接的互操作而开发的类库，也是Boost中唯一一个解释语言支持模块。Boost.Python除了提供Python C API的C++兼容封装，也使得整个扩展/嵌入过程更加方便。

